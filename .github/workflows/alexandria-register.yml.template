# Alexandria Registry GitHub Action
# 
# This workflow automatically registers and updates your repository with Alexandria
# when codebase views are added or modified.
#
# To use this workflow:
# 1. Copy this file to .github/workflows/alexandria-register.yml
# 2. Commit and push to your repository
# 3. The workflow will run automatically when .a24z/views/ files change

name: Register with Alexandria

on:
  # Trigger on pull requests that modify views
  pull_request:
    paths:
      - '.a24z/views/**'
    types: [opened, synchronize, reopened]
  
  # Trigger on pushes to the default branch
  push:
    branches:
      - main
      - master
    paths:
      - '.a24z/views/**'

jobs:
  register-alexandria:
    runs-on: ubuntu-latest
    name: Register Repository with Alexandria
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch the branch being worked on
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Determine branch context
        id: branch-context
        run: |
          # Get the default branch name
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
          
          # Determine current branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CURRENT_BRANCH="${{ github.event.pull_request.head.ref }}"
            UPDATE_CONTEXT="pull_request"
          else
            CURRENT_BRANCH="${{ github.ref_name }}"
            UPDATE_CONTEXT="push"
          fi
          
          # Check if we're on the default branch
          if [ "$CURRENT_BRANCH" = "$DEFAULT_BRANCH" ]; then
            IS_DEFAULT="true"
          else
            IS_DEFAULT="false"
          fi
          
          echo "current_branch=$CURRENT_BRANCH" >> $GITHUB_OUTPUT
          echo "is_default=$IS_DEFAULT" >> $GITHUB_OUTPUT
          echo "update_context=$UPDATE_CONTEXT" >> $GITHUB_OUTPUT
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "üìä Branch Context:"
          echo "  - Event: ${{ github.event_name }}"
          echo "  - Current Branch: $CURRENT_BRANCH"
          echo "  - Default Branch: $DEFAULT_BRANCH"
          echo "  - Is Default: $IS_DEFAULT"
          echo "  - Update Context: $UPDATE_CONTEXT"

      - name: Check for .a24z/views directory
        id: check-views
        run: |
          if [ -d ".a24z/views" ]; then
            echo "has_views=true" >> $GITHUB_OUTPUT
            VIEW_COUNT=$(find .a24z/views -name "*.json" -type f | wc -l)
            echo "view_count=$VIEW_COUNT" >> $GITHUB_OUTPUT
            echo "‚úÖ Found .a24z/views/ directory with $VIEW_COUNT view(s)"
          else
            echo "has_views=false" >> $GITHUB_OUTPUT
            echo "view_count=0" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No .a24z/views/ directory found"
          fi

      - name: Register with Alexandria
        id: register
        env:
          ALEXANDRIA_API_URL: https://git-gallery.com/api/alexandria
        run: |
          echo "üöÄ Registering with Alexandria..."
          
          # Prepare request body
          REQUEST_BODY=$(cat <<EOF
          {
            "owner": "${{ github.repository_owner }}",
            "name": "${{ github.event.repository.name }}",
            "branch": "${{ steps.branch-context.outputs.current_branch }}",
            "isDefaultBranch": ${{ steps.branch-context.outputs.is_default }},
            "updateContext": "${{ steps.branch-context.outputs.update_context }}"
          }
          EOF
          )
          
          echo "üìù Request body:"
          echo "$REQUEST_BODY" | jq .
          
          # Make the API call
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY" \
            "$ALEXANDRIA_API_URL/repos")
          
          # Extract status code and body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          echo "üì® Response (HTTP $HTTP_CODE):"
          echo "$BODY" | jq . || echo "$BODY"
          
          # Check if successful
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "‚úÖ Successfully registered with Alexandria!"
            
            # Extract status from response
            STATUS=$(echo "$BODY" | jq -r '.repository.status // "unknown"')
            VIEW_COUNT=$(echo "$BODY" | jq -r '.repository.viewCount // 0')
            
            if [ "$STATUS" = "registered" ]; then
              echo "üéâ Repository newly registered with $VIEW_COUNT view(s)"
            elif [ "$STATUS" = "updated" ]; then
              echo "üîÑ Repository updated with $VIEW_COUNT view(s)"
            elif [ "$STATUS" = "skipped" ]; then
              echo "‚è≠Ô∏è Update skipped (not from default branch or original PR)"
            fi
            
            # Set outputs for use in other steps
            echo "status=$STATUS" >> $GITHUB_OUTPUT
            echo "view_count=$VIEW_COUNT" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to register with Alexandria (HTTP $HTTP_CODE)"
            echo "Error details:"
            echo "$BODY" | jq '.error' || echo "$BODY"
            exit 1
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.register.outputs.status != 'skipped'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.register.outputs.status }}';
            const viewCount = '${{ steps.register.outputs.view_count }}';
            const branch = '${{ steps.branch-context.outputs.current_branch }}';
            
            let message = '### üìö Alexandria Registry Update\n\n';
            
            if (status === 'registered') {
              message += `‚úÖ Repository successfully registered with Alexandria!\n\n`;
              message += `- **Branch**: \`${branch}\`\n`;
              message += `- **Codebase Views**: ${viewCount}\n\n`;
              message += `Your codebase views will be available at [Alexandria](https://a24z-ai.github.io/alexandria) once this PR is merged.`;
            } else if (status === 'updated') {
              message += `üîÑ Repository updated in Alexandria\n\n`;
              message += `- **Branch**: \`${branch}\`\n`;
              message += `- **Codebase Views**: ${viewCount}\n\n`;
              message += `View your codebase at [Alexandria](https://a24z-ai.github.io/alexandria).`;
            }
            
            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Alexandria Registry Update')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

      - name: Summary
        if: always()
        run: |
          echo "## üìä Alexandria Registration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | ${{ github.repository }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${{ steps.branch-context.outputs.current_branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Is Default Branch | ${{ steps.branch-context.outputs.is_default }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Event Type | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Has Views | ${{ steps.check-views.outputs.has_views }} |" >> $GITHUB_STEP_SUMMARY
          echo "| View Count | ${{ steps.check-views.outputs.view_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Registration Status | ${{ steps.register.outputs.status || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY